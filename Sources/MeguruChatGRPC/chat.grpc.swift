//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: chat.proto
//
import ChatGRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Chat_V1_ChatServiceClient`, then call methods of this protocol to make API calls.
public protocol Chat_V1_ChatServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Chat_V1_ChatServiceClientInterceptorFactoryProtocol? { get }

  func tempCreateUser(
    _ request: Chat_V1_TempCreateUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Chat_V1_TempCreateUserRequest, Chat_V1_TempCreateUserResponse>

  func send(
    _ request: Chat_V1_SendRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Chat_V1_SendRequest, Chat_V1_SendResponse>

  func receive(
    _ request: Chat_V1_ReceiveRequest,
    callOptions: CallOptions?,
    handler: @escaping (Chat_V1_ReceiveResponse) -> Void
  ) -> ServerStreamingCall<Chat_V1_ReceiveRequest, Chat_V1_ReceiveResponse>
}

extension Chat_V1_ChatServiceClientProtocol {
  public var serviceName: String {
    return "chat.v1.ChatService"
  }

  /// 検証用の一時的なユーザーを作成する RPC
  ///
  /// - Parameters:
  ///   - request: Request to send to TempCreateUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func tempCreateUser(
    _ request: Chat_V1_TempCreateUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Chat_V1_TempCreateUserRequest, Chat_V1_TempCreateUserResponse> {
    return self.makeUnaryCall(
      path: Chat_V1_ChatServiceClientMetadata.Methods.tempCreateUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTempCreateUserInterceptors() ?? []
    )
  }

  /// Unary call to Send
  ///
  /// - Parameters:
  ///   - request: Request to send to Send.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func send(
    _ request: Chat_V1_SendRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Chat_V1_SendRequest, Chat_V1_SendResponse> {
    return self.makeUnaryCall(
      path: Chat_V1_ChatServiceClientMetadata.Methods.send.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendInterceptors() ?? []
    )
  }

  /// Server streaming call to Receive
  ///
  /// - Parameters:
  ///   - request: Request to send to Receive.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func receive(
    _ request: Chat_V1_ReceiveRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Chat_V1_ReceiveResponse) -> Void
  ) -> ServerStreamingCall<Chat_V1_ReceiveRequest, Chat_V1_ReceiveResponse> {
    return self.makeServerStreamingCall(
      path: Chat_V1_ChatServiceClientMetadata.Methods.receive.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReceiveInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Chat_V1_ChatServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Chat_V1_ChatServiceNIOClient")
public final class Chat_V1_ChatServiceClient: Chat_V1_ChatServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Chat_V1_ChatServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Chat_V1_ChatServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the chat.v1.ChatService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Chat_V1_ChatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Chat_V1_ChatServiceNIOClient: Chat_V1_ChatServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Chat_V1_ChatServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the chat.v1.ChatService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Chat_V1_ChatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Chat_V1_ChatServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Chat_V1_ChatServiceClientInterceptorFactoryProtocol? { get }

  func makeTempCreateUserCall(
    _ request: Chat_V1_TempCreateUserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Chat_V1_TempCreateUserRequest, Chat_V1_TempCreateUserResponse>

  func makeSendCall(
    _ request: Chat_V1_SendRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Chat_V1_SendRequest, Chat_V1_SendResponse>

  func makeReceiveCall(
    _ request: Chat_V1_ReceiveRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Chat_V1_ReceiveRequest, Chat_V1_ReceiveResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Chat_V1_ChatServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Chat_V1_ChatServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Chat_V1_ChatServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeTempCreateUserCall(
    _ request: Chat_V1_TempCreateUserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Chat_V1_TempCreateUserRequest, Chat_V1_TempCreateUserResponse> {
    return self.makeAsyncUnaryCall(
      path: Chat_V1_ChatServiceClientMetadata.Methods.tempCreateUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTempCreateUserInterceptors() ?? []
    )
  }

  public func makeSendCall(
    _ request: Chat_V1_SendRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Chat_V1_SendRequest, Chat_V1_SendResponse> {
    return self.makeAsyncUnaryCall(
      path: Chat_V1_ChatServiceClientMetadata.Methods.send.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendInterceptors() ?? []
    )
  }

  public func makeReceiveCall(
    _ request: Chat_V1_ReceiveRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Chat_V1_ReceiveRequest, Chat_V1_ReceiveResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Chat_V1_ChatServiceClientMetadata.Methods.receive.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReceiveInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Chat_V1_ChatServiceAsyncClientProtocol {
  public func tempCreateUser(
    _ request: Chat_V1_TempCreateUserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Chat_V1_TempCreateUserResponse {
    return try await self.performAsyncUnaryCall(
      path: Chat_V1_ChatServiceClientMetadata.Methods.tempCreateUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTempCreateUserInterceptors() ?? []
    )
  }

  public func send(
    _ request: Chat_V1_SendRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Chat_V1_SendResponse {
    return try await self.performAsyncUnaryCall(
      path: Chat_V1_ChatServiceClientMetadata.Methods.send.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendInterceptors() ?? []
    )
  }

  public func receive(
    _ request: Chat_V1_ReceiveRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Chat_V1_ReceiveResponse> {
    return self.performAsyncServerStreamingCall(
      path: Chat_V1_ChatServiceClientMetadata.Methods.receive.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReceiveInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Chat_V1_ChatServiceAsyncClient: Chat_V1_ChatServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Chat_V1_ChatServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Chat_V1_ChatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Chat_V1_ChatServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'tempCreateUser'.
  func makeTempCreateUserInterceptors() -> [ClientInterceptor<Chat_V1_TempCreateUserRequest, Chat_V1_TempCreateUserResponse>]

  /// - Returns: Interceptors to use when invoking 'send'.
  func makeSendInterceptors() -> [ClientInterceptor<Chat_V1_SendRequest, Chat_V1_SendResponse>]

  /// - Returns: Interceptors to use when invoking 'receive'.
  func makeReceiveInterceptors() -> [ClientInterceptor<Chat_V1_ReceiveRequest, Chat_V1_ReceiveResponse>]
}

public enum Chat_V1_ChatServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ChatService",
    fullName: "chat.v1.ChatService",
    methods: [
      Chat_V1_ChatServiceClientMetadata.Methods.tempCreateUser,
      Chat_V1_ChatServiceClientMetadata.Methods.send,
      Chat_V1_ChatServiceClientMetadata.Methods.receive,
    ]
  )

  public enum Methods {
    public static let tempCreateUser = GRPCMethodDescriptor(
      name: "TempCreateUser",
      path: "/chat.v1.ChatService/TempCreateUser",
      type: GRPCCallType.unary
    )

    public static let send = GRPCMethodDescriptor(
      name: "Send",
      path: "/chat.v1.ChatService/Send",
      type: GRPCCallType.unary
    )

    public static let receive = GRPCMethodDescriptor(
      name: "Receive",
      path: "/chat.v1.ChatService/Receive",
      type: GRPCCallType.serverStreaming
    )
  }
}

